#!/bin/bash
# Database Initializer for Humanizer Agent
# Creates and initializes new databases

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

show_usage() {
    cat <<EOF
${BLUE}Humanizer Agent - Database Initializer${NC}

Usage: ./dbinit [command] [options]

Commands:
    create <name>       Create a new PostgreSQL database
    drop <name>         Drop a database (DESTRUCTIVE!)
    reset <name>        Drop and recreate database (DESTRUCTIVE!)
    schema <name>       Initialize schema for existing database
    stats <name>        Show database statistics
    backup <name>       Backup database to SQL file
    restore <name> <file>  Restore database from SQL backup

Examples:
    ./dbinit create humanizer_new          # Create new database
    ./dbinit schema humanizer_new          # Initialize schema
    ./dbinit stats humanizer_test          # Show table counts
    ./dbinit backup humanizer              # Backup to humanizer_YYYY-MM-DD.sql
    ./dbinit restore humanizer_new backup.sql

Safety:
    - All destructive operations require confirmation
    - Backups are created automatically before resets
    - Use with care in production!

EOF
}

create_database() {
    db_name=$1

    echo -e "${BLUE}Creating database: $db_name${NC}"
    echo ""

    # Check if database already exists
    if psql -U humanizer -h localhost -lqt | cut -d \| -f 1 | grep -qw "$db_name"; then
        echo -e "${YELLOW}Database '$db_name' already exists${NC}"
        read -p "Do you want to drop and recreate it? (yes/no): " confirm
        if [ "$confirm" != "yes" ]; then
            echo "Aborted"
            exit 0
        fi
        drop_database "$db_name"
    fi

    # Create database
    echo -e "${YELLOW}Creating database...${NC}"
    createdb -U humanizer -h localhost "$db_name"

    # Enable pgvector extension
    echo -e "${YELLOW}Enabling pgvector extension...${NC}"
    psql -U humanizer -h localhost -d "$db_name" -c "CREATE EXTENSION IF NOT EXISTS vector;"

    echo -e "${GREEN}✓ Database '$db_name' created${NC}"
    echo ""
    echo "Next step: ./dbinit schema $db_name"
}

drop_database() {
    db_name=$1

    echo -e "${RED}WARNING: This will permanently delete database '$db_name'${NC}"
    read -p "Are you sure? Type the database name to confirm: " confirm

    if [ "$confirm" != "$db_name" ]; then
        echo "Aborted"
        exit 0
    fi

    echo -e "${YELLOW}Dropping database...${NC}"
    dropdb -U humanizer -h localhost "$db_name"
    echo -e "${GREEN}✓ Database '$db_name' dropped${NC}"
}

reset_database() {
    db_name=$1

    echo -e "${RED}WARNING: This will DROP and RECREATE '$db_name'${NC}"
    echo -e "${YELLOW}A backup will be created first${NC}"
    echo ""

    # Create backup first
    backup_file="$db_name-pre-reset-$(date +%Y%m%d-%H%M%S).sql"
    echo -e "${BLUE}Creating backup: $backup_file${NC}"
    pg_dump -U humanizer -h localhost "$db_name" > "$backup_file"
    echo -e "${GREEN}✓ Backup saved${NC}"
    echo ""

    # Confirm
    read -p "Continue with reset? Type 'yes' to confirm: " confirm
    if [ "$confirm" != "yes" ]; then
        echo "Aborted"
        exit 0
    fi

    # Drop and recreate
    drop_database "$db_name"
    create_database "$db_name"

    echo -e "${GREEN}✓ Database reset complete${NC}"
    echo -e "${BLUE}Backup saved to: $backup_file${NC}"
}

initialize_schema() {
    db_name=$1

    echo -e "${BLUE}Initializing schema for: $db_name${NC}"
    echo ""

    # Check if database exists
    if ! psql -U humanizer -h localhost -lqt | cut -d \| -f 1 | grep -qw "$db_name"; then
        echo -e "${RED}Error: Database '$db_name' does not exist${NC}"
        echo "Create it first: ./dbinit create $db_name"
        exit 1
    fi

    # Get backend directory
    BACKEND_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    SCHEMA_FILE="$BACKEND_DIR/database/chunk_schema.sql"

    if [ ! -f "$SCHEMA_FILE" ]; then
        echo -e "${RED}Error: Schema file not found: $SCHEMA_FILE${NC}"
        exit 1
    fi

    echo -e "${YELLOW}Applying schema from: chunk_schema.sql${NC}"
    psql -U humanizer -h localhost -d "$db_name" -f "$SCHEMA_FILE"

    echo -e "${GREEN}✓ Schema initialized${NC}"
    echo ""
    echo "Database ready for use!"
}

show_stats() {
    db_name=$1

    echo -e "${BLUE}Database Statistics: $db_name${NC}"
    echo ""

    # Check if database exists
    if ! psql -U humanizer -h localhost -lqt | cut -d \| -f 1 | grep -qw "$db_name"; then
        echo -e "${RED}Error: Database '$db_name' does not exist${NC}"
        exit 1
    fi

    # Show table counts
    psql -U humanizer -h localhost -d "$db_name" <<EOF
\echo '--- Table Row Counts ---'
SELECT
    schemaname,
    tablename,
    n_tup_ins - n_tup_del as row_count
FROM pg_stat_user_tables
ORDER BY row_count DESC;

\echo ''
\echo '--- Database Size ---'
SELECT pg_size_pretty(pg_database_size('$db_name')) as size;

\echo ''
\echo '--- Recently Modified Tables ---'
SELECT
    tablename,
    last_vacuum,
    last_autovacuum,
    last_analyze
FROM pg_stat_user_tables
ORDER BY greatest(last_vacuum, last_autovacuum, last_analyze) DESC NULLS LAST
LIMIT 5;
EOF
}

backup_database() {
    db_name=$1
    backup_file="${2:-$db_name-$(date +%Y%m%d-%H%M%S).sql}"

    echo -e "${BLUE}Backing up database: $db_name${NC}"
    echo -e "${BLUE}Backup file: $backup_file${NC}"
    echo ""

    # Check if database exists
    if ! psql -U humanizer -h localhost -lqt | cut -d \| -f 1 | grep -qw "$db_name"; then
        echo -e "${RED}Error: Database '$db_name' does not exist${NC}"
        exit 1
    fi

    echo -e "${YELLOW}Creating backup...${NC}"
    pg_dump -U humanizer -h localhost "$db_name" > "$backup_file"

    backup_size=$(du -h "$backup_file" | cut -f1)
    echo -e "${GREEN}✓ Backup complete${NC}"
    echo -e "${BLUE}Size: $backup_size${NC}"
    echo -e "${BLUE}File: $backup_file${NC}"
}

restore_database() {
    db_name=$1
    backup_file=$2

    if [ ! -f "$backup_file" ]; then
        echo -e "${RED}Error: Backup file not found: $backup_file${NC}"
        exit 1
    fi

    echo -e "${BLUE}Restoring database: $db_name${NC}"
    echo -e "${BLUE}From backup: $backup_file${NC}"
    echo ""

    # Check if database exists
    if ! psql -U humanizer -h localhost -lqt | cut -d \| -f 1 | grep -qw "$db_name"; then
        echo -e "${YELLOW}Database doesn't exist, creating it...${NC}"
        create_database "$db_name"
    else
        echo -e "${RED}WARNING: This will overwrite existing data in '$db_name'${NC}"
        read -p "Continue? (yes/no): " confirm
        if [ "$confirm" != "yes" ]; then
            echo "Aborted"
            exit 0
        fi
    fi

    echo -e "${YELLOW}Restoring backup...${NC}"
    psql -U humanizer -h localhost -d "$db_name" < "$backup_file"

    echo -e "${GREEN}✓ Restore complete${NC}"
}

# Main command router
case "${1:-help}" in
    create)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Database name required${NC}"
            echo "Usage: ./dbinit create <name>"
            exit 1
        fi
        create_database "$2"
        ;;
    drop)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Database name required${NC}"
            echo "Usage: ./dbinit drop <name>"
            exit 1
        fi
        drop_database "$2"
        ;;
    reset)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Database name required${NC}"
            echo "Usage: ./dbinit reset <name>"
            exit 1
        fi
        reset_database "$2"
        ;;
    schema|init)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Database name required${NC}"
            echo "Usage: ./dbinit schema <name>"
            exit 1
        fi
        initialize_schema "$2"
        ;;
    stats|info)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Database name required${NC}"
            echo "Usage: ./dbinit stats <name>"
            exit 1
        fi
        show_stats "$2"
        ;;
    backup)
        if [ -z "$2" ]; then
            echo -e "${RED}Error: Database name required${NC}"
            echo "Usage: ./dbinit backup <name> [output_file]"
            exit 1
        fi
        backup_database "$2" "$3"
        ;;
    restore)
        if [ -z "$2" ] || [ -z "$3" ]; then
            echo -e "${RED}Error: Database name and backup file required${NC}"
            echo "Usage: ./dbinit restore <name> <backup_file>"
            exit 1
        fi
        restore_database "$2" "$3"
        ;;
    help|--help|-h)
        show_usage
        ;;
    *)
        echo -e "${RED}Error: Unknown command '$1'${NC}\n"
        show_usage
        exit 1
        ;;
esac
